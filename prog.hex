
// Sample picoMIPS program which could support affine transformation algorithm
// n = 8 bits, Isize = 12+n = 20 bits
// format: 6b opcode, 3b %d, 3b %s, 8b immediate or address
// x2 = a11*x1 + a12*y1 + b11; y2 = a21*x1 + a22*y1 + b21;
// HEX ///////////////// BINARY //////////////////////////////////////// ASSEMBLER ///////////////////////
080000    // 24'b000010_00000_00000_00000000    //   ADDI %0, %0, 0;    clear REG 0
240080    // 24'b001001_00000_00000_10000000    //   BREL %-, %-, 1;    until ready=0 goto next Instruction
240000    // 20'b001001_00000_00000_00000000    //   BREL %-, %-, 0;    until ready=1 goto next Instruction[REPEAT HERE]
202000    // 20'b001000_00001_00000_00000000    //   ADDS %1, %0, -;    REG 1 <= inport x1
204000    // 20'b001000_00010_00000_00000000    //   ADDS %2, %0, -;    REG 2 <= inport x1
182160    // 20'b000110_00001_00001_01100000    //   MULI %1, %1, 0.75; %1 = %1 * 0.75; // 0.75x1
1842C0    // 20'b000110_00010_00010_11000000    //   MULI %2, %2, -0.5; %2 = %2 * -0.5; // -0.5x1
240080    // 20'b001001_00000_00000_10000000    //   BREL %-, %-, 1;    until ready=0 goto next Instruction
240000    // 20'b001001_00000_00000_00000000    //   BREL %-, %-, 0;    until ready=1 goto next Instruction
206000    // 20'b001000_00011_00000_00000000    //   ADDS %3, %0, -;    REG 3 <= inport y1
208000    // 20'b001000_00100_00000_00000000    //   ADDS %4, %0, -;    REG 4 <= inport y1
240080    // 20'b001001_00000_00000_10000000    //   BREL %-, %-, 1;    until ready=0 goto next Instruction
186340    // 20'b000110_00011_00011_01000000    //   MULI %3, %3, 0.5;  %3 = %3 * 0.5;  // 0.5y1
188460    // 20'b000110_00100_00100_01100000    //   MULI %4, %4, 0.75; %4 = %4 * 0.75; // 0.75y1
42300    // 20'b000001_00001_00011_00000000    //   ADD  %1, %3, -;    %1 = %1 + %3;   // 0.75x1 + 0.5y1
44400    // 20'b000001_00010_00100_00000000    //   ADD  %2, %4, -;    %2 = %2 + %4;   // -0.5x1 + 0.75y1
82114    // 20'b000010_00001_00001_00010100    //   ADDI %1, %1, 20;   %1 = %1 + 20;   // x2 = 0.75x1 + 0.5y1 + 20
1C2000    // 20'b000111_00001_00000_00000000    //   SHOW %1, %0, -;    SHOW %1
240000    // 20'b001001_00000_00000_00000000    //   BREL %-, %-, 0;    until ready=1 goto next Instruction
842EC    // 20'b000010_00010_00010_11101100    //   ADDI %2, %2, -20;  %2 = %2 + -20;  // y2 = -0.5x1 + 0.75y1 - 20
1C4000    // 20'b000111_00010_00000_00000000    //   SHOW %2, %0, -;    SHOW %2
280083    // 20'b001010_00000_00000_10000000    //   BABS %-, %-, 3;    until ready=0 goto LINE3 Instruction